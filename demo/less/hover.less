
@import "../../src/morphodynamics.less";

// ............................................................

& { // isolate scope
    // (have to use it now to not suffer from #1316, #1877 etc.)

// ............................................................

#config {
    @animated-state: ~':hover';
    .default-animated-style() {}
    .default-style() {
        // color: red;
    }
}

// ............................................................
// Miscellaneous

.begin-effects-group(0, "Miscellaneous");

.class(text-blur .66s forwards, {
    to {
        color: transparent;
        text-shadow: 0 0 .66em #fff;
    }
});

.text-glow {.transition(text-shadow .66s, 0 0 .66em fade(#fff, 99%))}

.text-bifurcation {
    @c: 0 ; // fade(#fff, 0);
    @p: 0;
    @value:
        (1.2 *  @p) (0.8 *  @p) @c,
        (1.0 *  @p) (1.3 * -@p) @c,
        (0.8 * -@p) (1.2 *  @p) @c,
        (1.4 * -@p) (0.8 * -@p) @c;
    // text-shadow: @value;
    & {
        @c: 6px; // fade(#fff, 100%);
        @p: 2em;
        .transition(text-shadow 1.1s ease-out, @value);
    }
}

// this should use `extend` but now that would break the demo generation script:
.hollow-barberpole {.hollow; .barberpole}

// ............................................................
// Background

.begin-effects-group(1, "Background");

.lighten {.shadow-overlay(#fff, 33%)}
.darken  {.shadow-overlay(#000, 16%)}

.shadow-overlay(@color, @alpha) {
    @value: inset 0 0 .5em 2.5em;
    box-shadow: @value fade(#000, 0);
    .transition(box-shadow .66s, @value fade(@color, @alpha));
}

.barberpole {
    @0: fade(#fff, 33%);
    @1: fade(#000,  0%);
    @size: 2em;
    .animation(barberpole 1.11s linear infinite, {
        to {background-position: @size 0}
    }, {
        background-repeat: repeat;
        background-size: @size @size;
        background-image: linear-gradient(-45deg,
            @0 23%, @1 27%, @1 48%, @0 52%, @0 73%, @1 77%, @1);
    });
}

.class(color-spin 5.5s linear alternate infinite, {
    .frame-iteration(7); .-(@advance) {
        background-color: spin(#6C9, (360 * @advance));
    }
});

// ............................................................
// Border Transitions

.begin-effects-group(2, "Border Transitions");

.border-fade {.transition(box-shadow .33s, inset 0 0 0 .17em fade(#000, 20%))}

.hollow {
    .before-overlay(.14em);
    &:hover:before {background-color: fade(#fff, 33%)}
    &:before {
        transition: background .33s linear;
        border-radius: .25em;
    }
}

.outline-outward {.outline(-1px)}
.outline-inward  {.outline(-1.1em)}
.round-corners   {.transition(border-radius .55s, 50%)}

// todo:

.outline(@start) {
    .before-overlay(@start);
    &:hover:before {.move(-.45em); opacity: .33}
    &:before {
        transition-duration: .33s;
        transition-property: top, right, bottom, left, opacity;
        border: fade(#000, 50%) solid .2em;
        border-color: inherit;
        border-radius: inherit;
        opacity: 0;
    }
}

// ............................................................
// Shadow Transitions

.begin-effects-group(3, "Shadow Transitions");

.shadow-glow   {.transition(box-shadow .33s, 0 0 .55em fade(#000, 55%))}
.shadow-outset {.transition(box-shadow .33s, .13em .13em .13em fade(#000, 44%))}
.shadow-inset  {.transition(box-shadow .33s, inset .13em .13em .13em fade(#000, 33%))}

// ............................................................
// 2D Transforms

.begin-effects-group(4, "2D Transforms");

& {

    #config {
        .default-style() {
            // color: green;
            &:extend(.aliasing-workaround_);
        }
    }

    .grow   {.transition(transform .33s, scale(1.1))}
    .shrink {.transition(transform .33s, scale(0.9))}
    
    .class(pulse 1.1s linear infinite, {
        25% {transform: scale(0.9)}
        75% {transform: scale(1.1)}
    });

    .class(pulse-grow .33s linear infinite alternate, {
        to  {transform: scale(1.1)}
    });
    
    .class(pulse-shrink .33s linear infinite alternate, {
        to  {transform: scale(0.9)}
    });

    .class(push .33s linear, {
        50% {transform: scale(0.8)}
    });

    .class(pop .33s linear, {
        50% {transform: scale(1.2)}
    });
    
    .rotate        {.transition(transform .33s, rotate(5deg))}
    .grow-rotate   {.transition(transform .33s, scale(1.1) rotate(5deg))}
    
    .float         {.transition(transform .33s, translateY(-.5em))}
    .sink          {.transition(transform .33s, translateY(+.5em))}
    
    .skew          {.transition(transform .33s, skew(-11deg))}
    .skew-forward  {.transition(transform .33s, skew(-11deg)); transform-origin: 0 100%}
    .skew-backward {.transition(transform .33s, skew(+11deg)); transform-origin: 0 100%}

    .class(wobble-horizontal 1.1s ease-in-out, {
        .frame-sequence(transform, 
            translate px, +8 -6 +4 -2 +1 0);
    });
    
    .class(wobble-vertical 1.1s ease-in-out, {
        .frame-sequence(transform, 
            translateY px, +8 -6 +4 -2 +1 0);
    });
    
    .class(wobble-bottom-right 1.1s ease-in-out, {
        .frame-sequence(transform; 
            translate px; +8 +8, -6 -6, +4 +4, -2 -2, +1 +1, 0 0);
    });

    .class(wobble-top-right 1.1s ease-in-out, {
        .frame-sequence(transform; 
            translate px; +8 -8, -6 +6, +4 -4, -2 +2, +1 -1, 0 0);
    });

    .wobble-scew-top    {.wobble-scew(); transform-origin: 0 100%}
    .wobble-scew-bottom {.wobble-scew(); transform-origin: 100% 0}

    .class(wobble-scew 1.1s ease-in-out, {
        .frame-sequence(transform, 
            skew deg, -12 +10 -6 +4 -2 0);
    });
    
    .class(buzz .15s linear infinite, {
        50% {transform: translateX(+3px) rotate(+2deg)}
       100% {transform: translateX(-3px) rotate(-2deg)}
    });

    .class(buzz-out .77s linear, {
        .frame-sequence(transform,
            translateX px, +3 -3 +3 -3 +2 -2 +2 -2 +1 -1,
            rotate    deg, +2 -2 +2 -2 +1 -1 +1 -1  0  0
        );
    });
    
}
    
.fly-away {.transition(transform 1.33s, scale(0) rotate(360deg))}

// ............................................................
// Bubbles

.begin-effects-group(5, "Bubbles");

& {
    @size: .65em;

    .bubble-top    {.bubble(top)}
    .bubble-right  {.bubble(right)}
    .bubble-bottom {.bubble(bottom)}
    .bubble-left   {.bubble(left)}
    
    .bubble-float-top {
        .bubble(top);
        .transition(transform .44s, translateY((@size / +2)))
    }

    .bubble-float-right {
        .bubble(right);
        .transition(transform .44s, translateX((@size / -2)))
    }

    .bubble-float-bottom {
        .bubble(bottom);
        .transition(transform .44s, translateY((@size / -2)))
    }

    .bubble-float-left {
        .bubble(left);
        .transition(transform .44s, translateX((@size / +2)))
    }

    .bubble(@side) {
        .before-overlay();
        &:hover:before {
            @{side}: -@size;
            .-(@side);
            .-(top)    {border-bottom-color: inherit}
            .-(right)  {border-left-color:   inherit}
            .-(bottom) {border-top-color:    inherit}
            .-(left)   {border-right-color:  inherit}
        }
        &:before {
            z-index: -1;
            transition: @side .44s, border-color .66s;
            @{side}: 0;
            border: @size solid transparent;
            border-@{side}-width: 0;
            .-(@side);
            .-(top)    {left: calc(50% - @size)}
            .-(right)  {top:  calc(50% - @size)}
            .-(bottom) {left: calc(50% - @size)}
            .-(left)   {top:  calc(50% - @size)}
        }
    }
}

// ............................................................

} // ~ pseudo-global scope

// ............................................................
// some utility mixins:

.begin-effects-group(@i, @title) {
    .md-group-@{i}:hover {
        content: @title;
    }
}

.before-overlay_ {
    position: relative;
    &:before {
        pointer-events: none;
        position: absolute;
        content: '';
    }
}

.before-overlay(@pos: none) {
    &:extend(.before-overlay_ all);
    &:before {.move(@pos)}
}

.move(@p) when not(@p = none) {
    top:    @p;
    right:  @p;
    bottom: @p;
    left:   @p;
}

.aliasing-workaround_ {
    transform: translateZ(0);
    box-shadow: 0 0 1px fade(#000, 0);
}
