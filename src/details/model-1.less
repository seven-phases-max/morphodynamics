
@import "../std/for";

// ............................................................
// default config, fixme: not usable yet

#config-- {
    @animated-state: ~'';
    .default-animated-style() {}
    .default-style() {}
}

// ............................................................

.animation(@parameters, @frames, @style: none) {
    .evalArgsAndConfig_();
    @keyframes @name {@frames();}
    .default-style();
   &@{animated-state} {
       .default-animated-style();
       animation: @parameters;
       @style();
    }
}

.transition(@parameters, @value, ...) {
    @style: {}; // fixme, unused
   .evalArgsAndConfig_();
   .default-style();
    transition+: @parameters;
   &@{animated-state} {
        .default-animated-style();
        @property: extract(@parameters, 1);
        @{property}: @value;
    }
}

.transition(@parameters, @value, @tail...) when (length(@tail) > 1) {
    // todo: put assertion for odd tail length
    .for(0, (length(@tail) / 2 - 1)); .-each(@i) {
        .transition(extract(@tail, (@i * 2 + 1)), extract(@tail, (@i * 2 + 2)));
    }
}

.class(@parameters, @frames, @style: none, @animated-style: none) {
    .evalArgsAndConfig_();
    .@{name} {
        .animation(@parameters, @frames);
        @style();
    }
}

//.class(@parameters, @frames) {
//   .class(@parameters, @frames, {})
//}

.evalArgsAndConfig_() {
    @name: extract(@parameters, 1);
    .-() when (@style = none) {@style: {}} .-;
    #config();
}
